#include "Game.h"
#include <iostream>

using namespace std;
using namespace sf;

Game::Game():m_Window("Snake",sf::Vector2u(800,600)),
	     m_World(sf::Vector2u(800,600)),
	     m_Snake(m_World.GetBlockSize()),
	     m_Box(10,14,350,sf::Vector2f(225,0))
{

        m_clock.restart();
        srand(time(nullptr));
	
        m_elapsed = 0.0f;
	// m_Box.Add("Seed random number generator with: " + std::to_string(time(NULL)));
}


Game::~Game(){}

sf::Time Game::GetElapsed(){return m_clock.getElapsedTime();}
void Game::RestartClock(){m_elapsed += m_clock.restart().asSeconds();}
s_Window* Game::GetWindow(){return &m_Window;}

void Game::HandleInput(){
  if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)&& m_Snake.GetPhysicalDirection()!=Direction::Down){
    m_Snake.SetDirection(Direction::Up);
  }
  else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down)&& m_Snake.GetPhysicalDirection()!=Direction::Up){
    m_Snake.SetDirection(Direction::Down);
  }
  else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)&& m_Snake.GetPhysicalDirection()!=Direction::Right){
    m_Snake.SetDirection(Direction::Left);
  }
  else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)&& m_Snake.GetPhysicalDirection()!=Direction::Left){
    m_Snake.SetDirection(Direction::Right);
  }
}

void Game::Update(){
  // Without updating window method, I won't be able to update game properly
  m_Window.Update();
  // NOTE: timestep is the expected time per each update
  // which manifest by the snakeSpeed. 
  float timestep = 1.0f /m_Snake.GetSpeed();
  // NOTE: by checking whether m_elapsed time > timesteps or not
  // I can decide to add more update or not and subtract until
  // it lesser than timestep
  if (m_elapsed>=timestep){
    m_Snake.Tick();
    m_World.Update(m_Snake, m_Box);
    m_elapsed-=timestep;
    if(m_Snake.HasLost()){
      m_Box.Add("You have died! Your Score: "+ std::to_string(m_Snake.GetScore()));
      m_Snake.Reset();
    }
  }
}

void Game::Render(){
  m_Window.BeginDraw();
  // Render here
  m_World.Render(*m_Window.GetRenderWindow());
  m_Snake.Render(*m_Window.GetRenderWindow());
  m_Box.Render(*m_Window.GetRenderWindow());
  
  m_Window.EndDraw();
}



